% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select_postcodes.R
\name{create_polygon_from_str}
\alias{create_polygon_from_str}
\title{#' Get polygon postcodes
#' 
#' Get postcodes contained with a geojson polygon
#' 
#' @param postcodes sf object containing postcodes
#' @param geojson A geojson of a single polygon
#' @param crs Coordinate reference system of the polygon
#' @return sf object containing postcodes within the polygon
get_polygon_postcodes <- function(
  postcodes, geojson, crs
) {
  # Check arguments
  stopifnot(sf::st_crs(postcodes)[['input']] == 'EPSG:4326')
  stopifnot('osgrdind' %in% colnames(postcodes))
  stopifnot(length(geojson) == 1)
  stopifnot(class(geojson) == 'character')
  stopifnot(length(crs) == 1)
  stopifnot(is.integer(crs))
  stopifnot(sf::st_can_transform(src = crs, dst = 4326))
  # Create polygon
  polygon <- read_geojson_polygon(
    geojson = geojson,
    input_crs = crs,
    output_crs = 4326
  )
  stopifnot(sf::st_geometry_type(polygon) == 'POLYGON')
  stopifnot(length(polygon) == 1)
  # Get postcodes
  filtered_postcodes <- sf::st_filter(
    x = dplyr::filter(postcodes, postcodes$osgrdind < 9),
    y = polygon
  ) |>
    dplyr::arrange(order_postcodes(pcds, level = 'complete'))
  # Check postcodes and return
  if (nrow(filtered_postcodes) == 0) {
    stop('Polygon did not identify any postcodes')
  }
  stopifnot(!base::any(base::duplicated(filtered_postcodes$pcds)))
  return(filtered_postcodes)
}}
\usage{
create_polygon_from_str(coordinate_str, crs)
}
\description{
#' Get polygon postcodes
#' 
#' Get postcodes contained with a geojson polygon
#' 
#' @param postcodes sf object containing postcodes
#' @param geojson A geojson of a single polygon
#' @param crs Coordinate reference system of the polygon
#' @return sf object containing postcodes within the polygon
get_polygon_postcodes <- function(
  postcodes, geojson, crs
) {
  # Check arguments
  stopifnot(sf::st_crs(postcodes)[['input']] == 'EPSG:4326')
  stopifnot('osgrdind' %in% colnames(postcodes))
  stopifnot(length(geojson) == 1)
  stopifnot(class(geojson) == 'character')
  stopifnot(length(crs) == 1)
  stopifnot(is.integer(crs))
  stopifnot(sf::st_can_transform(src = crs, dst = 4326))
  # Create polygon
  polygon <- read_geojson_polygon(
    geojson = geojson,
    input_crs = crs,
    output_crs = 4326
  )
  stopifnot(sf::st_geometry_type(polygon) == 'POLYGON')
  stopifnot(length(polygon) == 1)
  # Get postcodes
  filtered_postcodes <- sf::st_filter(
    x = dplyr::filter(postcodes, postcodes$osgrdind < 9),
    y = polygon
  ) |>
    dplyr::arrange(order_postcodes(pcds, level = 'complete'))
  # Check postcodes and return
  if (nrow(filtered_postcodes) == 0) {
    stop('Polygon did not identify any postcodes')
  }
  stopifnot(!base::any(base::duplicated(filtered_postcodes$pcds)))
  return(filtered_postcodes)
}
}
